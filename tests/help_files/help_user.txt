The Problem

Over the past few days I have been looking for the best way to extend the generic user login system in Laravel 4.1 to allow for different types of user.

Setting up user authentication in Laravel was ridiculously easy, but there was one major issue with the default user setup that was giving me some headaches, user types.

The issue was that I wanted to engineer a way for users to be able to login and then have the data that is applicable to their account type available, however I didn't want any of this hardcoded in anyway.

As an example lets use Employees and Freelancers, with one central login form I wanted each use case to be able to login using exactly the same method, and then be presented with different profiles depending on the account type.

Hacky, Hack-Hack

Looking around I found so many ways to-do this, and if I am honest, they all seemed bad I wanted to make sure that the following rules applied to this solution.

I wanted the generic user model to remain as simple as possible, I didn't want to 'smash in' lots of extra little fields.
I didn't want to add meta data or serialised data, it had to remain well structured data that I could run queries on easily in the future.
I didn't want to use any conditionals around this, I wanted to make sure that it was fully polymorphic), and used a plugin architecture.
I didn't want any unnecessary dependencies in any part of this solution, the idea that they are working as independent parts was super important.
I wanted every aspect of the code to be testable.
I didn't want to "shoehorn" something into a pattern that didn't quite fit, for example a lot of solutions I saw around the internet were based around using Single Table Inheritance, and whilst I liked the idea behind this for very similar models, I hated the thought of having todo this in my situation (more below).
I had to stick to as many of the SOLID principles) as possible.
Single Table Inheritance

Throughout my investigations I kept running into the same solution, STI or Single Table Inheritance, this is a method of having one table to store multiple models in, so for example it would be perfectly feasible to have a Vehicle model, with two subclasses of Car and Van.

The one point is that all these models would be different classes, but they would all share the same table in the database. So if the differences were very minor, then you would expect to see one or two empty fields on each entry as some data would only be applicable to certain types.

A great article on this is here : Single Table Inheritance

A lot of posts on the internet suggested that most people were fine with this solution, but I found this to be horrible. The greater the differences between the Car and Van types, the more fields we would have in one HUGE table, and a lot of them would be redundant, it just seemed totally wrong, I then looked into using polymorphic relationships.

What are polymorphic relationships?

On the Laravel website I found the following definition ...

"Polymorphic relations allow a model to belong to more than one other model, on a single association. For example, you might have a photo model that belongs to either a staff model or an order model."
This actually has many uses, one of them being exactly what we want to achieve, we want one Model (User) to have a relationship with another Model on a polymorphic basis, meaning that if we could for example switch out different types of user data models as long as they were in the defined relationship.

Let's see an example.

The first thing we need todo is make sure that we have the User model setup correctly.

<?php  
class User extends Eloquent implements UserInterface, RemindableInterface {

    protected $table = 'users';
    protected $hidden = array('password');

    public function getAuthIdentifier()
    {
        return $this->getKey();
    }

    public function getAuthPassword()
    {
        return $this->password;
    }

    public function getReminderEmail()
    {
        return $this->email;
    }

    public function userable()
    {
        return $this->morphTo();
    }
}
this is pretty much the default user model for a Laravel install, however the important addition is the extra method at the bottom named "userable".

public function userable()  
{
    return $this->morphTo();
}
This method gives the user model access to the other Model that we want to associate with this one, this could be an Employee model or a Freelancer model.

Employee / Freelancer Models

The employee model would look something like this, it defines the inverse relationship of what we setup on the user model.

<?php  
class Employee extends Eloquent {  
    protected $table = "users_employees";

    public function user()
    {
        return $this->morphOne('User', 'userable');
    }
}
the freelancer model is a carbon copy, except we define a separate table to store this data.

<?php  
class Freelancer extends Eloquent {  
    protected $table = "users_freelancers";

    public function user()
    {
        return $this->morphOne('User', 'userable');
    }
}
Setting up the Database

The next step we will do manually in the database for the sake of this blog post, but this step needs to be built when you are creating a user from your website. This step could be built into some Factory or Repository pattern for your User class.

Not only will you need to make sure the "users" table is populated, but also make sure the "users employees" and "users freelancers" are also populated correctly.

The structure for the tables are ...

Users Table

id : auto-increment
firstname : string
surname : string
username : string
password : string (hashed of course!)
email : string
userable_id : integer
userable_type : string
created_at : datetime
updated_at : datetime
the userableid and userabletype reference the model and the ID for each association, so if a row in this table contained ...

userable_id : 1
userable_type : Freelancer
This would then create a polymorphic relationship from the users table to the users_freelancers table on that foreign key.

Users_Employees Table

id : auto-increment
salary : integer
employee_number : string
created_at : datetime
updated_at : datetime
Users_Freelancers Table

id : auto-increment
dayrate : integer
created_at : datetime
updated_at : datetime
So, in terms of the additional data and relationships that need to be setup at the time of user creation its as simple as this.

Users table needs to contain an extra field called "userable_id" which references the record in the associated model 
(foreign key)
Users table needs to contain an extra field called "userable_type" which defines which model the relationship looks at for this record.
If for example, a row in the Users model contained a userableid of 13 and a userabletype of "Freelancer", Laravel would then look at the Freelancer model, and associate the record with the ID of 13.

Testing the relationship

The final part of this puzzle is leveraging what we have built to push this into our views, in my profile controllers index method I can pass in the currently logged in User, and the type as follows :-

<?php  
class ProfileController extends BaseController  
{    
    public function getIndex()
    {
        $data = array(
            'user'  =>    Auth::user(),
            'type'  =>    get_class(Auth::user()->userable)
        );

        return View::make('profile.blade.php', $data);
    }
}
And then from within our profile.blade.php page we access the data as follows (make sure you try to access the correct data for the loaded type, you may need a simple conditional to a certain partial for each type) :-

<ul>  
  <li>Data Type is $type </li>
  <li>Dayrate is $user->userable->dayrate </li>
</ul>  
Final Thoughts

Explaining this in a blog post feels far more complicated than the actual implementation, as with most things I would suggest just diving in and having a go yourself, if you have any questions, or need any help feel free to leave a comment below.